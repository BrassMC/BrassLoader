import io.github.brassmc.bradle.task.DownloadMCTask
import io.github.brassmc.bradle.task.RemapJarTask
import java.nio.file.Files
import java.util.function.Function

plugins {
    id 'java'
    id 'io.github.brassmc.bradle' version '0.4.0'
}

repositories {
    mavenCentral()

    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
    flatDir {
        dir(project.file('run'))
    }
}

minecraft {
    minecraftVersion = '1.19.1'
}

sourceSets {
    boot
    mixin
}

configurations {
    boot
    bootImplementation.extendsFrom(boot)

    minecraftRuntime
    minecraftClientRuntime.extendsFrom(minecraftRuntime)
    minecraftServerRuntime.extendsFrom(minecraftRuntime)
    bootImplementation.extendsFrom(minecraftRuntime)
    bootImplementation.extendsFrom(minecraftClientRuntime)
    mixinImplementation.extendsFrom(minecraftClientRuntime)
}

final asm = [
        "org.ow2.asm:asm:$asmVersion",
        "org.ow2.asm:asm-util:$asmVersion",
        "org.ow2.asm:asm-tree:$asmVersion"
]

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.jetbrains:annotations:23.0.0'

    boot 'cpw.mods:bootstraplauncher:1.1.2'
    boot "cpw.mods:securejarhandler:$sshVersion"

    asm.each {
        boot it
        bootCompileOnly it
    }

    mixinCompileOnly 'net.minecraft.blank:client_mapped:1.19.1'
    compileOnly 'net.minecraft.blank:client_mapped:1.19.1'

    bootCompileOnly "cpw.mods:securejarhandler:$sshVersion"
    mixinCompileOnly "cpw.mods:securejarhandler:$sshVersion"
    minecraftRuntime "cpw.mods:modlauncher:$mmlVersion"
    minecraftRuntime "org.spongepowered:mixin:$mixinVersion"

    bootCompileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    bootAnnotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    compileOnly sourceSets.boot.output

    mixinImplementation sourceSets.main.output
    mixinImplementation sourceSets.boot.output
}

processMixinResources {
    inputs.properties([
            'mixinVersion': mixinVersion
    ])
    filesMatching('brassloader.mixins.json') {
        expand 'mixinVersion': mixinVersion
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.create('downloadMcClient', DownloadMCTask) {
    group = 'minecraft'
    side = 'client'
    output = project.file('run/client.jar')
}
tasks.create('remapMcClient', RemapJarTask) {
    group = 'minecraft'
    from(downloadMcClient)
    output.set(project.file('run/client_mapped-1.19.1.jar'))
}

tasks.create('downloadMcServer', DownloadMCTask) {
    group = 'minecraft'
    side = 'server'
    output = project.file('run/server.jar')
}
tasks.create('remapMcServer', RemapJarTask) {
    group = 'minecraft'
    from(downloadMcServer)
}

jar {
    from sourceSets.mixin.output
    manifest.attributes([
            'Automatic-Module-Name': 'io.github.brassmc.brassloader',
    ])
}

tasks.create('fatJar', Jar) {
    it.from sourceSets.boot.output
    it.dependsOn(jar)
    classifier 'fat'
    it.from(jar.archiveFile.get().asFile) {
        rename(inTxt -> 'brass.jar')
        into 'META-INF/jars'
    }
    manifest.attributes([
            'Automatic-Module-Name': 'io.github.brassmc.brassloader.boot'
    ])
}

final Function<String, java.nio.file.Path> legacyCpPath = (String type) -> project.file("$buildDir/resources/boot/mc_cp_${type}.txt").toPath().toAbsolutePath()

processBootResources {
    doLast {
        final configurationResolver = { String type ->
            final lines = configurations."minecraft${type.capitalize()}Runtime".resolve().stream()
                    .map { it.toPath().toAbsolutePath().toString() }
                    .toList()
            final outPath = legacyCpPath.apply(type)
            lines.add(fatJar.archiveFile.get().asFile.toString())
            Files.createDirectories(outPath.parent)
            Files.write(outPath, lines)
        }
        configurationResolver('client')
        configurationResolver('server')
    }
}

//noinspection GroovyAssignabilityCheck
final var configureRunTask = { JavaExec it, String type ->
    println "Using Java version ${it.getJavaVersion()} for $type configuration"
    it.dependsOn('fatJar')
    it.getMainClass().set('cpw.mods.bootstraplauncher.BootstrapLauncher')
    final sshModule = 'cpw.mods.securejarhandler'
    it.jvmArgs(
            '--module-path', configurations.boot.resolve().stream().map { it.toString() }.toList().join(File.pathSeparator),
            "-DlegacyClassPath.file=${legacyCpPath.apply(type)}",
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-opens', "java.base/java.util.jar=$sshModule",
            '--add-opens', "java.base/java.lang.invoke=$sshModule",
            '--add-exports', "java.base/sun.security.util=$sshModule",
            '--add-exports', 'jdk.naming.dns/com.sun.jndi.dns=java.naming',

            '-Dmixin.debug.verbose=true', '-Dmixin.debug.export=true',
            '-XstartOnFirstThread'
    )
    it.group = 'minecraft'

    Files.createDirectories(it.workingDir.toPath())
}

tasks.create('runClient', JavaExec) {
    setWorkingDir(project.file('run/client'))
    jvmArgs(
            "-Dbrassloader.mclocation=${project.file('run/client_mapped-1.19.1.jar')}"
    )
    args(
            '--launchTarget', 'brass:mcclient',
            '--accessToken', '***',
            '--version', '1.19.1',
            '--assetIndex', '1.19',
            '--assetsDir', downloadAssets.output
    )
    configureRunTask(it, 'client')
}
tasks.create('runServer', JavaExec) {
    setWorkingDir(project.file('run/server'))
    jvmArgs(
            "-Dbrassloader.mclocation=${project.file('run/server_mapped.jar')}"
    )
    args(
            '--launchTarget', 'brass:mcserver',
    )
    configureRunTask(it, 'server')
}
